local WORLD = require "scenes.game.model.world"
local HASHES = require "libs.hashes"
local GOOEY = require "gooey.themes.dirtylarry.dirtylarry"
local INPUT = require "libs.input_receiver"
local LUME = require "libs.lume"
local ProgressBar = require "libs.progress_bar"
local FLOW = require "libs.flow"
local ANIMATION_SHOW_TIME = 0.5
local ANIMATION_HIDE_TIME = 0.8
---@class SelfGui1




---@param self SelfGui1
local function update_disk_space(self)
    local rotation = 0
    for i = 1, 4 do
        local space = self.disk_space[i]
        local ui = self.ui[i]
        gui.set_text(ui.lbl, space)
        gui.set_rotation(ui.pie, vmath.vector3(0, 0, rotation))
        gui.set_rotation(ui.line, vmath.vector3(0, 0, rotation))
        gui.set_rotation(ui.drag, vmath.vector3(0, 0, rotation))
        gui.set_fill_angle(ui.pie, 360 * space)
        rotation = rotation + 360 * space
    end
end
---@param self SelfGui1
local function find_clicked_pie(self, action)
    for i = 2, 4 do
        if gui.pick_node(self.ui[i].lbl, action.x, action.y) then
            print(i)
            return i
        end
    end
end

---@param self SelfGui1
local function update_station_hp(self)
    self.station_hp:set_progress(WORLD.station_hp)
end

---@param direction number 1 right -1 left
local function change_pie_value(self, node, value)
    value = math.floor(value * 1000) / 1000
    if node == 1 then
        return
    end
    if node == 4 then
        return
    end
    local next_node = node + 1

    local delta = math.floor((value - self.disk_space[node]) * 100) / 100
    if math.abs(delta) < 0.05 then
        return
    end
    delta = 0.05 * math.abs(delta) / delta
    if self.disk_space[node] + delta < 0.00001 then
        return
    end
    if self.disk_space[next_node] - delta < 0.00001 then
        return
    end
    self.disk_space[node] = LUME.clamp(self.disk_space[node] + delta, 0.01, 1)
    self.disk_space[next_node] = LUME.clamp(self.disk_space[next_node] - delta, 0.01, 1)
    -- self.disk_space[node] = math.floor((self.disk_space[node])*100)/100
    --  self.disk_space[next_node] = math.floor((self.disk_space[next_node])*100)/100
    update_disk_space(self)
end

local faces = {
    { value = 0.7, type = "happy" },
    { value = 0.3, type = "neitral" },
    { value = 0.1, type = "tired" },
    { value = 0, type = "angry" }
}

local hero_types = {
    "medic", "enginer", "scientist"
}

---@param self SelfGui1
local function update_hero_cells(self)
    local angry = 0
    for i = 1, 3 do
        local hero_cell = self.hero_cells[i]
        local hero = WORLD.heroes[i]
        --gui.set_text(hero_cell.lbl_h ,"happy:" .. hero.happy)
        --gui.set_text(hero_cell.lbl_p ,"productivity" .. hero.productivity)
        local face
        for _, f in ipairs(faces) do
            if f.value <= hero.happy then
                face = f.type
                break
            end
        end
        if hero.prev_happy then
            local dt =  hero.happy - hero.prev_happy
            local fx
            if dt > 0.0001 then
                fx = "particle_happy"
            elseif dt < -0.0001 then
                fx = "particle_sad"
            else
                fx = "particle_neitral"
            end
            hero.prev_happy = hero.happy

            gui.play_particlefx(gui.get_node("hero_" .. i .. "/" .. fx))
        else
            hero.prev_happy = hero.happy
        end
        hero_cell.progress_h:set_progress(hero.happy)
        hero_cell.progress_p:set_progress(hero.productivity)
        gui.play_flipbook(hero_cell.face, hero_types[i] .. "_" .. face)
    end
    gui.set_text(gui.get_node("lbl_days"), WORLD.days)
end

---@param self SelfGui1
local function next_day(self)
    FLOW.start(function()
        INPUT.release()
        update_station_hp(self)
        update_hero_cells(self)
        gui.set_text(gui.get_node("lbl_day"), "DAY:" .. 16 - WORLD.days)
        gui.animate(gui.get_node("container_day"), "color.w", 1, gui.EASING_LINEAR, 2,0,nil,gui.PLAYBACK_ONCE_PINGPONG)
        FLOW.delay(4)
        local angry = 0
        for _, hero in ipairs(WORLD.heroes) do
            if hero.happy <= 0.0001 then
                angry = angry + 1
            end
        end
        --check austronafts
        angry = LUME.clamp(angry, 0, 2)
        for i = 1, angry do
            if not gui.is_enabled(self["austranaut_" .. i]) then
                FLOW.delay(1)
                msg.post("main:/sounds#switch", HASHES.MSG_PLAY_SOUND)
                gui.set_enabled(self["austranaut_" .. i], true)
                gui.play_flipbook(self["lever_" .. i], "lever_on")
            end
        end
        for i = 2, angry + 1, -1 do
            if gui.is_enabled(self["austranaut_" .. i]) then
                FLOW.delay(1)
                msg.post("main:/sounds#switch", HASHES.MSG_PLAY_SOUND)
                gui.set_enabled(self["austranaut_" .. i], false)
                gui.play_flipbook(self["lever_" .. i], "lever_off")
            end
        end

        
        INPUT.acquire()
    end)

end

---@param self SelfGui1
local function on_input_btns(self, action_id, action)
    local group = GOOEY.group("group1", function()
        GOOEY.button("btn_ok", action_id, action, function(button)
            WORLD:act({ self.disk_space[2], self.disk_space[3], self.disk_space[4] })
            next_day(self)
        end)
    end)
    return group.consumed
end

---@param self SelfGui1
function init(self)
    --INPUT.acquire()
    gui.set_color(gui.get_node("container_day"), vmath.vector4(1,1,1,0))
    WORLD:reset()
    self.ui = {
        { pie = gui.get_node("pie0/pie"), lbl = gui.get_node("text0"), line = gui.get_node("pie0/line"), drag = gui.get_node("pie0/drag_node") },
        { pie = gui.get_node("pie1/pie"), lbl = gui.get_node("text1"), line = gui.get_node("pie1/line"), drag = gui.get_node("pie1/drag_node") },
        { pie = gui.get_node("pie2/pie"), lbl = gui.get_node("text2"), line = gui.get_node("pie2/line"), drag = gui.get_node("pie2/drag_node") },
        { pie = gui.get_node("pie3/pie"), lbl = gui.get_node("text3"), line = gui.get_node("pie3/line"), drag = gui.get_node("pie3/drag_node") },
    }
    self.hero_cells = {
        { icon = gui.get_node("hero_1/icon"), bar = gui.get_node("hero_1/box1"),
          progress_h = ProgressBar("hero_1/progress_happy"), progress_p = ProgressBar("hero_1/progress_productivity"),
          face = gui.get_node("hero_1/face") },
        {
            icon = gui.get_node("hero_2/icon"), bar = gui.get_node("hero_2/box1"),
            progress_h = ProgressBar("hero_2/progress_happy"), progress_p = ProgressBar("hero_2/progress_productivity"),
            face = gui.get_node("hero_2/face") },
        {
            icon = gui.get_node("hero_3/icon"), bar = gui.get_node("hero_3/box1"),
            progress_h = ProgressBar("hero_3/progress_happy"), progress_p = ProgressBar("hero_3/progress_productivity"),
            face = gui.get_node("hero_3/face") }
    }
    self.drag_node_1 = gui.get_node("pie2/drag_node")
    self.drag_node_2 = gui.get_node("pie3/drag_node")
    self.austranaut_1 = gui.get_node("austranaut_1")
    self.austranaut_2 = gui.get_node("austranaut_2")
    self.lever_1 = gui.get_node("lever_1")
    self.lever_2 = gui.get_node("lever_2")
    gui.set_enabled(self.austranaut_1, false)
    gui.set_enabled(self.austranaut_2, false)
    self.station_hp = ProgressBar("progress_station")
    self.disk_space = { 0.4, 0.1, 0.25, 0.25 }
    update_disk_space(self)
    next_day(self)
    self.pie_center = gui.get_position(gui.get_node("disk_sectors"))
end

function final(self)
    INPUT.release()
    WORLD:reset()
end

function update(self, dt)
    -- Add update code here
    -- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
    -- Add message-handling code here
    -- Remove this function if not needed
end

function on_input(self, action_id, action)
    if on_input_btns(self, action_id, action) then
        return
    end
    if action_id == HASHES.INPUT_TOUCH then
        if action.pressed then
            if gui.pick_node(self.drag_node_1, action.x, action.y) then
                self.selected_drag = 2
                self.drag_node = 2
                self.selected_node = 2
                self.drag_start_angle = gui.get_fill_angle(self.ui[self.drag_node].pie)
                self.selected_drag_point = vmath.vector3(action.x, action.y, 0) - self.pie_center
            elseif gui.pick_node(self.drag_node_2, action.x, action.y) then
                self.selected_drag = 3
                self.drag_node = 3
                self.selected_node = 3
                self.drag_start_angle = gui.get_fill_angle(self.ui[self.drag_node].pie)
                self.selected_drag_point = vmath.vector3(action.x, action.y, 0) - self.pie_center
            end
            --[[if self.selected_node then gui.set_size(self.ui[self.selected_node].pie, vmath.vector3(400,400,0)) end
            self.selected_node = find_clicked_pie(self, action)
            if self.selected_node then gui.set_size(self.ui[self.selected_node].pie, vmath.vector3(500,500,0)) end--]]
        elseif action.released then
            self.on_touched_disk = false
            self.selected_drag = nil
            self.drag_node = nil
            self.selected_drag_point = nil
        end
        if self.selected_drag then
            local v1 = vmath.vector3(action.x, action.y, 0) - self.pie_center
            local a = self.selected_drag_point
            local angle = math.atan2(a.x * v1.y - v1.x * a.y, a.x * v1.x + a.y * v1.y)
            -- print("*****")
            -- print(self.drag_start_angle)
            -- print(math.deg(angle))
            angle = self.drag_start_angle + math.deg(angle)
            local value = angle / 360 * 1
            change_pie_value(self, self.selected_node, value)
        else

        end
    end
    if action_id == nil or (not self.selected_drag and action_id == HASHES.INPUT_TOUCH) then
        local touched = false
        for i, hero in ipairs(self.hero_cells) do
            if not hero.animated and (gui.pick_node(hero.icon, action.x, action.y) or gui.pick_node(hero.bar, action.x, action.y)) then
                touched = true
                if self.pointer_on_icon ~= i then
                    if self.pointer_on_icon then
                        local cell = self.hero_cells[self.pointer_on_icon]
                        cell.animated = true
                        gui.animate(cell.bar, "scale.x", 0, gui.EASING_INEXPO, ANIMATION_HIDE_TIME, 0, function()
                            cell.animated = false
                        end, gui.PLAYBACK_ONCE_FORWARD)
                    end
                    self.pointer_on_icon = i
                    gui.animate(hero.bar, "scale.x", 1, gui.EASING_INEXPO, ANIMATION_SHOW_TIME, 0, function()
                        hero.animated = false
                    end, gui.PLAYBACK_ONCE_FORWARD)
                end
                break
            end
        end
        if not touched and (self.pointer_on_icon and not self.hero_cells[self.pointer_on_icon].animated) then
            local cell = self.hero_cells[self.pointer_on_icon]
            cell.animated = true
            gui.animate(self.hero_cells[self.pointer_on_icon].bar, "scale.x", 0, gui.EASING_INEXPO, ANIMATION_HIDE_TIME, 0, function()
                cell.animated = false
            end, gui.PLAYBACK_ONCE_FORWARD)
            self.pointer_on_icon = false
        end
    end

end

function on_reload(self)
    -- Add input-handling code here
    -- Remove this function if not needed
end
